// Code generated by MockGen. DO NOT EDIT.
// Source: sbe/handler (interfaces: OrderEntry)

// Package mockhandler is a generated GoMock package.
package mockhandler

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entity "sbe/entity"
	iLinkBinary "sbe/sbe/iLinkBinary"
)

// MockOrderEntry is a mock of OrderEntry interface
type MockOrderEntry struct {
	ctrl     *gomock.Controller
	recorder *MockOrderEntryMockRecorder
}

// MockOrderEntryMockRecorder is the mock recorder for MockOrderEntry
type MockOrderEntryMockRecorder struct {
	mock *MockOrderEntry
}

// NewMockOrderEntry creates a new mock instance
func NewMockOrderEntry(ctrl *gomock.Controller) *MockOrderEntry {
	mock := &MockOrderEntry{ctrl: ctrl}
	mock.recorder = &MockOrderEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderEntry) EXPECT() *MockOrderEntryMockRecorder {
	return m.recorder
}

// OnOrderCancel mocks base method
func (m *MockOrderEntry) OnOrderCancel(arg0 context.Context, arg1 *iLinkBinary.OrderCancelRequest516, arg2 entity.SBESession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnOrderCancel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnOrderCancel indicates an expected call of OnOrderCancel
func (mr *MockOrderEntryMockRecorder) OnOrderCancel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOrderCancel", reflect.TypeOf((*MockOrderEntry)(nil).OnOrderCancel), arg0, arg1, arg2)
}

// OnOrderModify mocks base method
func (m *MockOrderEntry) OnOrderModify(arg0 context.Context, arg1 *iLinkBinary.OrderCancelReplaceRequest515, arg2 entity.SBESession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnOrderModify", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnOrderModify indicates an expected call of OnOrderModify
func (mr *MockOrderEntryMockRecorder) OnOrderModify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOrderModify", reflect.TypeOf((*MockOrderEntry)(nil).OnOrderModify), arg0, arg1, arg2)
}

// OnOrderNew mocks base method
func (m *MockOrderEntry) OnOrderNew(arg0 context.Context, arg1 *iLinkBinary.NewOrderSingle514, arg2 entity.SBESession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnOrderNew", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnOrderNew indicates an expected call of OnOrderNew
func (mr *MockOrderEntryMockRecorder) OnOrderNew(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOrderNew", reflect.TypeOf((*MockOrderEntry)(nil).OnOrderNew), arg0, arg1, arg2)
}
