// Code generated by MockGen. DO NOT EDIT.
// Source: sbe/entity (interfaces: SBEMessage)

// Package mockentity is a generated GoMock package.
package mockentity

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
	iLinkBinary "sbe/sbe/iLinkBinary"
)

// MockSBEMessage is a mock of SBEMessage interface
type MockSBEMessage struct {
	ctrl     *gomock.Controller
	recorder *MockSBEMessageMockRecorder
}

// MockSBEMessageMockRecorder is the mock recorder for MockSBEMessage
type MockSBEMessageMockRecorder struct {
	mock *MockSBEMessage
}

// NewMockSBEMessage creates a new mock instance
func NewMockSBEMessage(ctrl *gomock.Controller) *MockSBEMessage {
	mock := &MockSBEMessage{ctrl: ctrl}
	mock.recorder = &MockSBEMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSBEMessage) EXPECT() *MockSBEMessageMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockSBEMessage) Decode(arg0 *iLinkBinary.SbeGoMarshaller, arg1 io.Reader, arg2, arg3 uint16, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockSBEMessageMockRecorder) Decode(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSBEMessage)(nil).Decode), arg0, arg1, arg2, arg3, arg4)
}

// Encode mocks base method
func (m *MockSBEMessage) Encode(arg0 *iLinkBinary.SbeGoMarshaller, arg1 io.Writer, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockSBEMessageMockRecorder) Encode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockSBEMessage)(nil).Encode), arg0, arg1, arg2)
}

// SbeBlockLength mocks base method
func (m *MockSBEMessage) SbeBlockLength() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SbeBlockLength")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// SbeBlockLength indicates an expected call of SbeBlockLength
func (mr *MockSBEMessageMockRecorder) SbeBlockLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SbeBlockLength", reflect.TypeOf((*MockSBEMessage)(nil).SbeBlockLength))
}

// SbeSchemaId mocks base method
func (m *MockSBEMessage) SbeSchemaId() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SbeSchemaId")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// SbeSchemaId indicates an expected call of SbeSchemaId
func (mr *MockSBEMessageMockRecorder) SbeSchemaId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SbeSchemaId", reflect.TypeOf((*MockSBEMessage)(nil).SbeSchemaId))
}

// SbeSchemaVersion mocks base method
func (m *MockSBEMessage) SbeSchemaVersion() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SbeSchemaVersion")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// SbeSchemaVersion indicates an expected call of SbeSchemaVersion
func (mr *MockSBEMessageMockRecorder) SbeSchemaVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SbeSchemaVersion", reflect.TypeOf((*MockSBEMessage)(nil).SbeSchemaVersion))
}

// SbeTemplateId mocks base method
func (m *MockSBEMessage) SbeTemplateId() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SbeTemplateId")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// SbeTemplateId indicates an expected call of SbeTemplateId
func (mr *MockSBEMessageMockRecorder) SbeTemplateId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SbeTemplateId", reflect.TypeOf((*MockSBEMessage)(nil).SbeTemplateId))
}
