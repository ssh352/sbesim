// Code generated by MockGen. DO NOT EDIT.
// Source: sbe/entity (interfaces: SBESession)

// Package mockentity is a generated GoMock package.
package mockentity

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entity "sbe/entity"
)

// MockSBESession is a mock of SBESession interface
type MockSBESession struct {
	ctrl     *gomock.Controller
	recorder *MockSBESessionMockRecorder
}

// MockSBESessionMockRecorder is the mock recorder for MockSBESession
type MockSBESessionMockRecorder struct {
	mock *MockSBESession
}

// NewMockSBESession creates a new mock instance
func NewMockSBESession(ctrl *gomock.Controller) *MockSBESession {
	mock := &MockSBESession{ctrl: ctrl}
	mock.recorder = &MockSBESessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSBESession) EXPECT() *MockSBESessionMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSBESession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSBESessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSBESession)(nil).Close))
}

// GetSeqNo mocks base method
func (m *MockSBESession) GetSeqNo() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeqNo")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetSeqNo indicates an expected call of GetSeqNo
func (mr *MockSBESessionMockRecorder) GetSeqNo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeqNo", reflect.TypeOf((*MockSBESession)(nil).GetSeqNo))
}

// GetUUID mocks base method
func (m *MockSBESession) GetUUID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetUUID indicates an expected call of GetUUID
func (mr *MockSBESessionMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockSBESession)(nil).GetUUID))
}

// Send mocks base method
func (m *MockSBESession) Send(arg0 entity.SBEMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSBESessionMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSBESession)(nil).Send), arg0)
}

// Serve mocks base method
func (m *MockSBESession) Serve() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve")
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve
func (mr *MockSBESessionMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockSBESession)(nil).Serve))
}

// SetSeqNo mocks base method
func (m *MockSBESession) SetSeqNo(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSeqNo", arg0)
}

// SetSeqNo indicates an expected call of SetSeqNo
func (mr *MockSBESessionMockRecorder) SetSeqNo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSeqNo", reflect.TypeOf((*MockSBESession)(nil).SetSeqNo), arg0)
}
